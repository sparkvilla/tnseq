import os
   
SAMPLES = ['DATASET_NAME']

group = '-'.join(SAMPLES[0].split('-')[1:])
dataset = SAMPLES[0]

# This is for localhost execution
PATH_TO_INPUT_FILES = os.path.join('/input/',group,dataset)
PATH_TO_OUTPUT = os.path.join('/output/',dataset)

for smp in SAMPLES:
  print("Sample " + smp + " will be processed")

rule final: 
    input:
        expand(os.path.join(PATH_TO_OUTPUT,'{sample}_R1_fastqc.html'), sample=SAMPLES),
        expand(os.path.join(PATH_TO_OUTPUT,'{sample}_R2_fastqc.html'), sample=SAMPLES),
        expand(os.path.join(PATH_TO_OUTPUT,'{sample}_trimmed_R1.fastq'), sample=SAMPLES),
        expand(os.path.join(PATH_TO_OUTPUT,'{sample}_trimmed_R2.fastq'), sample=SAMPLES),
        expand(os.path.join(PATH_TO_OUTPUT,'{sample}_trimmed_R1_fastqc.html'), sample=SAMPLES),
        expand(os.path.join(PATH_TO_OUTPUT,'{sample}_trimmed_R2_fastqc.html'), sample=SAMPLES),
        expand(os.path.join(PATH_TO_OUTPUT,'{sample}_trimmed.fastq'), sample=SAMPLES),

rule perform_qc:
    input:
       R1=os.path.join(PATH_TO_INPUT_FILES,'{sample}_R1.fastq'),
       R2=os.path.join(PATH_TO_INPUT_FILES,'{sample}_R2.fastq'),
    params:
        out_dir = PATH_TO_OUTPUT,
    output:
       os.path.join(PATH_TO_OUTPUT,'{sample}_R1_fastqc.html'),
       os.path.join(PATH_TO_OUTPUT,'{sample}_R1_fastqc.zip'),
       os.path.join(PATH_TO_OUTPUT,'{sample}_R2_fastqc.html'),
       os.path.join(PATH_TO_OUTPUT,'{sample}_R2_fastqc.zip'),
    shell:
        r'''
            fastqc -o {params.out_dir} -f fastq {input.R1} {input.R2}
         '''

rule trimmometic_run:
     input:
       R1_read=os.path.join(PATH_TO_INPUT_FILES,'{sample}_R1.fastq'),
       R2_read=os.path.join(PATH_TO_INPUT_FILES,'{sample}_R1.fastq'),
     output:
       R1_trimmed=os.path.join(PATH_TO_OUTPUT,'{sample}_trimmed_R1.fastq'),
       R2_trimmed=os.path.join(PATH_TO_OUTPUT,'{sample}_trimmed_R2.fastq'),
       R1_unpaired=os.path.join(PATH_TO_OUTPUT,'{sample}_trimmed_upaired_R1.fastq'),
       R2_unpaired=os.path.join(PATH_TO_OUTPUT,'{sample}_trimmed_upaired_R2.fastq'),

     message: """---TRIMMOMATIC---"""
     shell:
        r'''
            java -jar /usr/share/java/trimmomatic-0.35.jar PE -phred33 {input.R1_read} {input.R2_read} {output.R1_trimmed} {output.R1_unpaired} {output.R2_trimmed} {output.R2_unpaired} LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:30
         '''

rule perform_qc_trimmed:
    input: 
       R1_trimmed_qc=os.path.join(PATH_TO_OUTPUT,'{sample}_trimmed_R1.fastq'),
       R2_trimmed_qc=os.path.join(PATH_TO_OUTPUT,'{sample}_trimmed_R2.fastq'),
    params:
       out_dir=PATH_TO_OUTPUT 
    output:
       os.path.join(PATH_TO_OUTPUT,'{sample}_trimmed_R1_fastqc.html'),
       os.path.join(PATH_TO_OUTPUT,'{sample}_trimmed_R1_fastqc.zip'),
       os.path.join(PATH_TO_OUTPUT,'{sample}_trimmed_R2_fastqc.html'),
       os.path.join(PATH_TO_OUTPUT,'{sample}_trimmed_R2_fastqc.zip'),
    
    message: """---QC trimmed Data---"""
    shell:
        r'''
            fastqc -outdir {params.out_dir} -f fastq {input.R1_trimmed_qc} {input.R2_trimmed_qc}
         '''

rule merge_trimmed_R1_and_R2:
    input: 
       R1_trimmed_qc=os.path.join(PATH_TO_OUTPUT,'{sample}_trimmed_R1.fastq'),
       R2_trimmed_qc=os.path.join(PATH_TO_OUTPUT,'{sample}_trimmed_R2.fastq'),
    output:
       merged=os.path.join(PATH_TO_OUTPUT,'{sample}_trimmed.fastq'),
   
    message: """---Merge trimmed R1 and R2---"""
    shell:
        r'''
            cat {input.R1_trimmed_qc} {input.R2_trimmed_qc} > {output.merged} 
         '''
